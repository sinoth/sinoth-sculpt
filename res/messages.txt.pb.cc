// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages.txt.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sculpt {

void protobuf_ShutdownFile_messages_2etxt() {
  delete Server::default_instance_;
  delete ServerList::default_instance_;
  delete ServerPiece::default_instance_;
  delete EntireMap::default_instance_;
  delete CurrentMap::default_instance_;
  delete SubmitPiece::default_instance_;
}

void protobuf_AddDesc_messages_2etxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Server::default_instance_ = new Server();
  ServerList::default_instance_ = new ServerList();
  ServerPiece::default_instance_ = new ServerPiece();
  EntireMap::default_instance_ = new EntireMap();
  CurrentMap::default_instance_ = new CurrentMap();
  SubmitPiece::default_instance_ = new SubmitPiece();
  Server::default_instance_->InitAsDefaultInstance();
  ServerList::default_instance_->InitAsDefaultInstance();
  ServerPiece::default_instance_->InitAsDefaultInstance();
  EntireMap::default_instance_->InitAsDefaultInstance();
  CurrentMap::default_instance_->InitAsDefaultInstance();
  SubmitPiece::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2etxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2etxt {
  StaticDescriptorInitializer_messages_2etxt() {
    protobuf_AddDesc_messages_2etxt();
  }
} static_descriptor_initializer_messages_2etxt_;


// ===================================================================

const ::std::string Server::_default_map_name_;
#ifndef _MSC_VER
const int Server::kMapIdFieldNumber;
const int Server::kMapNameFieldNumber;
const int Server::kTotalPiecesFieldNumber;
const int Server::kPiecesLeftFieldNumber;
const int Server::kPiecesAvailableFieldNumber;
#endif  // !_MSC_VER

Server::Server()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Server::InitAsDefaultInstance() {
}

Server::Server(const Server& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Server::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  map_name_ = const_cast< ::std::string*>(&_default_map_name_);
  total_pieces_ = 0u;
  pieces_left_ = 0u;
  pieces_available_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Server::~Server() {
  SharedDtor();
}

void Server::SharedDtor() {
  if (map_name_ != &_default_map_name_) {
    delete map_name_;
  }
  if (this != default_instance_) {
  }
}

void Server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Server& Server::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2etxt();  return *default_instance_;
}

Server* Server::default_instance_ = NULL;

Server* Server::New() const {
  return new Server;
}

void Server::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0u;
    if (_has_bit(1)) {
      if (map_name_ != &_default_map_name_) {
        map_name_->clear();
      }
    }
    total_pieces_ = 0u;
    pieces_left_ = 0u;
    pieces_available_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_map_name;
        break;
      }
      
      // required string map_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_pieces;
        break;
      }
      
      // required uint32 total_pieces = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_pieces:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_pieces_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pieces_left;
        break;
      }
      
      // required uint32 pieces_left = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pieces_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pieces_left_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pieces_available;
        break;
      }
      
      // required uint32 pieces_available = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pieces_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pieces_available_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 map_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }
  
  // required string map_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->map_name(), output);
  }
  
  // required uint32 total_pieces = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_pieces(), output);
  }
  
  // required uint32 pieces_left = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pieces_left(), output);
  }
  
  // required uint32 pieces_available = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pieces_available(), output);
  }
  
}

int Server::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }
    
    // required string map_name = 2;
    if (has_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }
    
    // required uint32 total_pieces = 3;
    if (has_total_pieces()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_pieces());
    }
    
    // required uint32 pieces_left = 4;
    if (has_pieces_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pieces_left());
    }
    
    // required uint32 pieces_available = 5;
    if (has_pieces_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pieces_available());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Server::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Server*>(&from));
}

void Server::MergeFrom(const Server& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_map_id(from.map_id());
    }
    if (from._has_bit(1)) {
      set_map_name(from.map_name());
    }
    if (from._has_bit(2)) {
      set_total_pieces(from.total_pieces());
    }
    if (from._has_bit(3)) {
      set_pieces_left(from.pieces_left());
    }
    if (from._has_bit(4)) {
      set_pieces_available(from.pieces_available());
    }
  }
}

void Server::CopyFrom(const Server& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void Server::Swap(Server* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(map_name_, other->map_name_);
    std::swap(total_pieces_, other->total_pieces_);
    std::swap(pieces_left_, other->pieces_left_);
    std::swap(pieces_available_, other->pieces_available_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Server::GetTypeName() const {
  return "sculpt.Server";
}


// ===================================================================

#ifndef _MSC_VER
const int ServerList::kServersFieldNumber;
#endif  // !_MSC_VER

ServerList::ServerList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ServerList::InitAsDefaultInstance() {
}

ServerList::ServerList(const ServerList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ServerList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerList::~ServerList() {
  SharedDtor();
}

void ServerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerList& ServerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2etxt();  return *default_instance_;
}

ServerList* ServerList::default_instance_ = NULL;

ServerList* ServerList::New() const {
  return new ServerList;
}

void ServerList::Clear() {
  servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ServerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sculpt.Server servers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_servers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .sculpt.Server servers = 1;
  for (int i = 0; i < this->servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->servers(i), output);
  }
  
}

int ServerList::ByteSize() const {
  int total_size = 0;
  
  // repeated .sculpt.Server servers = 1;
  total_size += 1 * this->servers_size();
  for (int i = 0; i < this->servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servers(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerList*>(&from));
}

void ServerList::MergeFrom(const ServerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  servers_.MergeFrom(from.servers_);
}

void ServerList::CopyFrom(const ServerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerList::IsInitialized() const {
  
  for (int i = 0; i < servers_size(); i++) {
    if (!this->servers(i).IsInitialized()) return false;
  }
  return true;
}

void ServerList::Swap(ServerList* other) {
  if (other != this) {
    servers_.Swap(&other->servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServerList::GetTypeName() const {
  return "sculpt.ServerList";
}


// ===================================================================

const ::std::string ServerPiece::_default_hash_;
const ::std::string ServerPiece::_default_data_;
#ifndef _MSC_VER
const int ServerPiece::kMapIdFieldNumber;
const int ServerPiece::kPieceIdFieldNumber;
const int ServerPiece::kHashFieldNumber;
const int ServerPiece::kSizeXFieldNumber;
const int ServerPiece::kSizeYFieldNumber;
const int ServerPiece::kSizeZFieldNumber;
const int ServerPiece::kDataFieldNumber;
#endif  // !_MSC_VER

ServerPiece::ServerPiece()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ServerPiece::InitAsDefaultInstance() {
}

ServerPiece::ServerPiece(const ServerPiece& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ServerPiece::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0;
  piece_id_ = 0;
  hash_ = const_cast< ::std::string*>(&_default_hash_);
  size_x_ = 0u;
  size_y_ = 0u;
  size_z_ = 0u;
  data_ = const_cast< ::std::string*>(&_default_data_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerPiece::~ServerPiece() {
  SharedDtor();
}

void ServerPiece::SharedDtor() {
  if (hash_ != &_default_hash_) {
    delete hash_;
  }
  if (data_ != &_default_data_) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ServerPiece::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerPiece& ServerPiece::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2etxt();  return *default_instance_;
}

ServerPiece* ServerPiece::default_instance_ = NULL;

ServerPiece* ServerPiece::New() const {
  return new ServerPiece;
}

void ServerPiece::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0;
    piece_id_ = 0;
    if (_has_bit(2)) {
      if (hash_ != &_default_hash_) {
        hash_->clear();
      }
    }
    size_x_ = 0u;
    size_y_ = 0u;
    size_z_ = 0u;
    if (_has_bit(6)) {
      if (data_ != &_default_data_) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ServerPiece::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_piece_id;
        break;
      }
      
      // required int32 piece_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piece_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piece_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hash;
        break;
      }
      
      // required string hash = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_size_x;
        break;
      }
      
      // required uint32 size_x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_x_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_size_y;
        break;
      }
      
      // required uint32 size_y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_y_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_size_z;
        break;
      }
      
      // required uint32 size_z = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_z_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_data;
        break;
      }
      
      // required bytes data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerPiece::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 map_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->map_id(), output);
  }
  
  // required int32 piece_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->piece_id(), output);
  }
  
  // required string hash = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->hash(), output);
  }
  
  // required uint32 size_x = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->size_x(), output);
  }
  
  // required uint32 size_y = 6;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->size_y(), output);
  }
  
  // required uint32 size_z = 7;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->size_z(), output);
  }
  
  // required bytes data = 8;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->data(), output);
  }
  
}

int ServerPiece::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }
    
    // required int32 piece_id = 2;
    if (has_piece_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piece_id());
    }
    
    // required string hash = 4;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hash());
    }
    
    // required uint32 size_x = 5;
    if (has_size_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size_x());
    }
    
    // required uint32 size_y = 6;
    if (has_size_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size_y());
    }
    
    // required uint32 size_z = 7;
    if (has_size_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size_z());
    }
    
    // required bytes data = 8;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerPiece::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerPiece*>(&from));
}

void ServerPiece::MergeFrom(const ServerPiece& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_map_id(from.map_id());
    }
    if (from._has_bit(1)) {
      set_piece_id(from.piece_id());
    }
    if (from._has_bit(2)) {
      set_hash(from.hash());
    }
    if (from._has_bit(3)) {
      set_size_x(from.size_x());
    }
    if (from._has_bit(4)) {
      set_size_y(from.size_y());
    }
    if (from._has_bit(5)) {
      set_size_z(from.size_z());
    }
    if (from._has_bit(6)) {
      set_data(from.data());
    }
  }
}

void ServerPiece::CopyFrom(const ServerPiece& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerPiece::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void ServerPiece::Swap(ServerPiece* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(piece_id_, other->piece_id_);
    std::swap(hash_, other->hash_);
    std::swap(size_x_, other->size_x_);
    std::swap(size_y_, other->size_y_);
    std::swap(size_z_, other->size_z_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServerPiece::GetTypeName() const {
  return "sculpt.ServerPiece";
}


// ===================================================================

const ::std::string EntireMap::_default_name_;
const ::std::string EntireMap::_default_data_;
#ifndef _MSC_VER
const int EntireMap::kNameFieldNumber;
const int EntireMap::kMapSizeXFieldNumber;
const int EntireMap::kMapSizeYFieldNumber;
const int EntireMap::kMapSizeZFieldNumber;
const int EntireMap::kPieceSizeXFieldNumber;
const int EntireMap::kPieceSizeYFieldNumber;
const int EntireMap::kPieceSizeZFieldNumber;
const int EntireMap::kDataFieldNumber;
const int EntireMap::kUsernamesFieldNumber;
#endif  // !_MSC_VER

EntireMap::EntireMap()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EntireMap::InitAsDefaultInstance() {
}

EntireMap::EntireMap(const EntireMap& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EntireMap::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  map_size_x_ = 0u;
  map_size_y_ = 0u;
  map_size_z_ = 0u;
  piece_size_x_ = 0u;
  piece_size_y_ = 0u;
  piece_size_z_ = 0u;
  data_ = const_cast< ::std::string*>(&_default_data_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntireMap::~EntireMap() {
  SharedDtor();
}

void EntireMap::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (data_ != &_default_data_) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void EntireMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EntireMap& EntireMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2etxt();  return *default_instance_;
}

EntireMap* EntireMap::default_instance_ = NULL;

EntireMap* EntireMap::New() const {
  return new EntireMap;
}

void EntireMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    map_size_x_ = 0u;
    map_size_y_ = 0u;
    map_size_z_ = 0u;
    piece_size_x_ = 0u;
    piece_size_y_ = 0u;
    piece_size_z_ = 0u;
    if (_has_bit(7)) {
      if (data_ != &_default_data_) {
        data_->clear();
      }
    }
  }
  usernames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EntireMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map_size_x;
        break;
      }
      
      // required uint32 map_size_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_size_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_size_x_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_size_y;
        break;
      }
      
      // required uint32 map_size_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_size_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_size_y_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_map_size_z;
        break;
      }
      
      // required uint32 map_size_z = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_size_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_size_z_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_piece_size_x;
        break;
      }
      
      // required uint32 piece_size_x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piece_size_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &piece_size_x_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_piece_size_y;
        break;
      }
      
      // required uint32 piece_size_y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piece_size_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &piece_size_y_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_piece_size_z;
        break;
      }
      
      // required uint32 piece_size_z = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piece_size_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &piece_size_z_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_data;
        break;
      }
      
      // required bytes data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_usernames;
        break;
      }
      
      // repeated string usernames = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_usernames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_usernames()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_usernames;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntireMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required uint32 map_size_x = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->map_size_x(), output);
  }
  
  // required uint32 map_size_y = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->map_size_y(), output);
  }
  
  // required uint32 map_size_z = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->map_size_z(), output);
  }
  
  // required uint32 piece_size_x = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->piece_size_x(), output);
  }
  
  // required uint32 piece_size_y = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->piece_size_y(), output);
  }
  
  // required uint32 piece_size_z = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->piece_size_z(), output);
  }
  
  // required bytes data = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->data(), output);
  }
  
  // repeated string usernames = 9;
  for (int i = 0; i < this->usernames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->usernames(i), output);
  }
  
}

int EntireMap::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required uint32 map_size_x = 2;
    if (has_map_size_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_size_x());
    }
    
    // required uint32 map_size_y = 3;
    if (has_map_size_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_size_y());
    }
    
    // required uint32 map_size_z = 4;
    if (has_map_size_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_size_z());
    }
    
    // required uint32 piece_size_x = 5;
    if (has_piece_size_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->piece_size_x());
    }
    
    // required uint32 piece_size_y = 6;
    if (has_piece_size_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->piece_size_y());
    }
    
    // required uint32 piece_size_z = 7;
    if (has_piece_size_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->piece_size_z());
    }
    
    // required bytes data = 8;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  // repeated string usernames = 9;
  total_size += 1 * this->usernames_size();
  for (int i = 0; i < this->usernames_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->usernames(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntireMap::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EntireMap*>(&from));
}

void EntireMap::MergeFrom(const EntireMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  usernames_.MergeFrom(from.usernames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_map_size_x(from.map_size_x());
    }
    if (from._has_bit(2)) {
      set_map_size_y(from.map_size_y());
    }
    if (from._has_bit(3)) {
      set_map_size_z(from.map_size_z());
    }
    if (from._has_bit(4)) {
      set_piece_size_x(from.piece_size_x());
    }
    if (from._has_bit(5)) {
      set_piece_size_y(from.piece_size_y());
    }
    if (from._has_bit(6)) {
      set_piece_size_z(from.piece_size_z());
    }
    if (from._has_bit(7)) {
      set_data(from.data());
    }
  }
}

void EntireMap::CopyFrom(const EntireMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntireMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void EntireMap::Swap(EntireMap* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(map_size_x_, other->map_size_x_);
    std::swap(map_size_y_, other->map_size_y_);
    std::swap(map_size_z_, other->map_size_z_);
    std::swap(piece_size_x_, other->piece_size_x_);
    std::swap(piece_size_y_, other->piece_size_y_);
    std::swap(piece_size_z_, other->piece_size_z_);
    std::swap(data_, other->data_);
    usernames_.Swap(&other->usernames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EntireMap::GetTypeName() const {
  return "sculpt.EntireMap";
}


// ===================================================================

const ::std::string CurrentMap::_default_name_;
const ::std::string CurrentMap::_default_completed_pieces_;
#ifndef _MSC_VER
const int CurrentMap::kNameFieldNumber;
const int CurrentMap::kCompletedPiecesFieldNumber;
const int CurrentMap::kAvailableFieldNumber;
#endif  // !_MSC_VER

CurrentMap::CurrentMap()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CurrentMap::InitAsDefaultInstance() {
}

CurrentMap::CurrentMap(const CurrentMap& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CurrentMap::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  completed_pieces_ = const_cast< ::std::string*>(&_default_completed_pieces_);
  available_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurrentMap::~CurrentMap() {
  SharedDtor();
}

void CurrentMap::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (completed_pieces_ != &_default_completed_pieces_) {
    delete completed_pieces_;
  }
  if (this != default_instance_) {
  }
}

void CurrentMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CurrentMap& CurrentMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2etxt();  return *default_instance_;
}

CurrentMap* CurrentMap::default_instance_ = NULL;

CurrentMap* CurrentMap::New() const {
  return new CurrentMap;
}

void CurrentMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (completed_pieces_ != &_default_completed_pieces_) {
        completed_pieces_->clear();
      }
    }
    available_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CurrentMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_completed_pieces;
        break;
      }
      
      // required string completed_pieces = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_completed_pieces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_completed_pieces()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_available;
        break;
      }
      
      // required uint32 available = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &available_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CurrentMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string completed_pieces = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->completed_pieces(), output);
  }
  
  // required uint32 available = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->available(), output);
  }
  
}

int CurrentMap::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string completed_pieces = 2;
    if (has_completed_pieces()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->completed_pieces());
    }
    
    // required uint32 available = 3;
    if (has_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->available());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrentMap::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CurrentMap*>(&from));
}

void CurrentMap::MergeFrom(const CurrentMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_completed_pieces(from.completed_pieces());
    }
    if (from._has_bit(2)) {
      set_available(from.available());
    }
  }
}

void CurrentMap::CopyFrom(const CurrentMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CurrentMap::Swap(CurrentMap* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(completed_pieces_, other->completed_pieces_);
    std::swap(available_, other->available_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CurrentMap::GetTypeName() const {
  return "sculpt.CurrentMap";
}


// ===================================================================

const ::std::string SubmitPiece::_default_hash_;
const ::std::string SubmitPiece::_default_username_;
const ::std::string SubmitPiece::_default_data_;
#ifndef _MSC_VER
const int SubmitPiece::kMapIdFieldNumber;
const int SubmitPiece::kPieceIdFieldNumber;
const int SubmitPiece::kHashFieldNumber;
const int SubmitPiece::kUsernameFieldNumber;
const int SubmitPiece::kDataFieldNumber;
#endif  // !_MSC_VER

SubmitPiece::SubmitPiece()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SubmitPiece::InitAsDefaultInstance() {
}

SubmitPiece::SubmitPiece(const SubmitPiece& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SubmitPiece::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0;
  piece_id_ = 0;
  hash_ = const_cast< ::std::string*>(&_default_hash_);
  username_ = const_cast< ::std::string*>(&_default_username_);
  data_ = const_cast< ::std::string*>(&_default_data_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubmitPiece::~SubmitPiece() {
  SharedDtor();
}

void SubmitPiece::SharedDtor() {
  if (hash_ != &_default_hash_) {
    delete hash_;
  }
  if (username_ != &_default_username_) {
    delete username_;
  }
  if (data_ != &_default_data_) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void SubmitPiece::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SubmitPiece& SubmitPiece::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2etxt();  return *default_instance_;
}

SubmitPiece* SubmitPiece::default_instance_ = NULL;

SubmitPiece* SubmitPiece::New() const {
  return new SubmitPiece;
}

void SubmitPiece::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0;
    piece_id_ = 0;
    if (_has_bit(2)) {
      if (hash_ != &_default_hash_) {
        hash_->clear();
      }
    }
    if (_has_bit(3)) {
      if (username_ != &_default_username_) {
        username_->clear();
      }
    }
    if (_has_bit(4)) {
      if (data_ != &_default_data_) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SubmitPiece::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_piece_id;
        break;
      }
      
      // required int32 piece_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piece_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piece_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hash;
        break;
      }
      
      // required string hash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_username;
        break;
      }
      
      // required string username = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }
      
      // required bytes data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubmitPiece::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 map_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->map_id(), output);
  }
  
  // required int32 piece_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->piece_id(), output);
  }
  
  // required string hash = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->hash(), output);
  }
  
  // required string username = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->username(), output);
  }
  
  // required bytes data = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->data(), output);
  }
  
}

int SubmitPiece::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }
    
    // required int32 piece_id = 2;
    if (has_piece_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piece_id());
    }
    
    // required string hash = 3;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hash());
    }
    
    // required string username = 4;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // required bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmitPiece::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SubmitPiece*>(&from));
}

void SubmitPiece::MergeFrom(const SubmitPiece& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_map_id(from.map_id());
    }
    if (from._has_bit(1)) {
      set_piece_id(from.piece_id());
    }
    if (from._has_bit(2)) {
      set_hash(from.hash());
    }
    if (from._has_bit(3)) {
      set_username(from.username());
    }
    if (from._has_bit(4)) {
      set_data(from.data());
    }
  }
}

void SubmitPiece::CopyFrom(const SubmitPiece& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitPiece::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void SubmitPiece::Swap(SubmitPiece* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(piece_id_, other->piece_id_);
    std::swap(hash_, other->hash_);
    std::swap(username_, other->username_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SubmitPiece::GetTypeName() const {
  return "sculpt.SubmitPiece";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sculpt

// @@protoc_insertion_point(global_scope)
