// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.txt

#ifndef PROTOBUF_messages_2etxt__INCLUDED
#define PROTOBUF_messages_2etxt__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace sculpt {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_messages_2etxt();
void protobuf_AssignDesc_messages_2etxt();
void protobuf_ShutdownFile_messages_2etxt();

class Server;
class ServerList;
class ServerPiece;

// ===================================================================

class Server : public ::google::protobuf::MessageLite {
 public:
  Server();
  virtual ~Server();
  
  Server(const Server& from);
  
  inline Server& operator=(const Server& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Server& default_instance();
  
  void Swap(Server* other);
  
  // implements Message ----------------------------------------------
  
  Server* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Server& from);
  void MergeFrom(const Server& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 map_id = 1;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 1;
  inline ::google::protobuf::uint32 map_id() const;
  inline void set_map_id(::google::protobuf::uint32 value);
  
  // required string map_name = 2;
  inline bool has_map_name() const;
  inline void clear_map_name();
  static const int kMapNameFieldNumber = 2;
  inline const ::std::string& map_name() const;
  inline void set_map_name(const ::std::string& value);
  inline void set_map_name(const char* value);
  inline void set_map_name(const char* value, size_t size);
  inline ::std::string* mutable_map_name();
  
  // required uint32 total_pieces = 3;
  inline bool has_total_pieces() const;
  inline void clear_total_pieces();
  static const int kTotalPiecesFieldNumber = 3;
  inline ::google::protobuf::uint32 total_pieces() const;
  inline void set_total_pieces(::google::protobuf::uint32 value);
  
  // required uint32 pieces_left = 4;
  inline bool has_pieces_left() const;
  inline void clear_pieces_left();
  static const int kPiecesLeftFieldNumber = 4;
  inline ::google::protobuf::uint32 pieces_left() const;
  inline void set_pieces_left(::google::protobuf::uint32 value);
  
  // required uint32 pieces_available = 5;
  inline bool has_pieces_available() const;
  inline void clear_pieces_available();
  static const int kPiecesAvailableFieldNumber = 5;
  inline ::google::protobuf::uint32 pieces_available() const;
  inline void set_pieces_available(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:sculpt.Server)
 private:
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 map_id_;
  ::std::string* map_name_;
  static const ::std::string _default_map_name_;
  ::google::protobuf::uint32 total_pieces_;
  ::google::protobuf::uint32 pieces_left_;
  ::google::protobuf::uint32 pieces_available_;
  friend void  protobuf_AddDesc_messages_2etxt();
  friend void protobuf_AssignDesc_messages_2etxt();
  friend void protobuf_ShutdownFile_messages_2etxt();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Server* default_instance_;
};
// -------------------------------------------------------------------

class ServerList : public ::google::protobuf::MessageLite {
 public:
  ServerList();
  virtual ~ServerList();
  
  ServerList(const ServerList& from);
  
  inline ServerList& operator=(const ServerList& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const ServerList& default_instance();
  
  void Swap(ServerList* other);
  
  // implements Message ----------------------------------------------
  
  ServerList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ServerList& from);
  void MergeFrom(const ServerList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .sculpt.Server servers = 1;
  inline int servers_size() const;
  inline void clear_servers();
  static const int kServersFieldNumber = 1;
  inline const ::sculpt::Server& servers(int index) const;
  inline ::sculpt::Server* mutable_servers(int index);
  inline ::sculpt::Server* add_servers();
  inline const ::google::protobuf::RepeatedPtrField< ::sculpt::Server >&
      servers() const;
  inline ::google::protobuf::RepeatedPtrField< ::sculpt::Server >*
      mutable_servers();
  
  // @@protoc_insertion_point(class_scope:sculpt.ServerList)
 private:
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::sculpt::Server > servers_;
  friend void  protobuf_AddDesc_messages_2etxt();
  friend void protobuf_AssignDesc_messages_2etxt();
  friend void protobuf_ShutdownFile_messages_2etxt();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ServerList* default_instance_;
};
// -------------------------------------------------------------------

class ServerPiece : public ::google::protobuf::MessageLite {
 public:
  ServerPiece();
  virtual ~ServerPiece();
  
  ServerPiece(const ServerPiece& from);
  
  inline ServerPiece& operator=(const ServerPiece& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const ServerPiece& default_instance();
  
  void Swap(ServerPiece* other);
  
  // implements Message ----------------------------------------------
  
  ServerPiece* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ServerPiece& from);
  void MergeFrom(const ServerPiece& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string hash = 1;
  inline bool has_hash() const;
  inline void clear_hash();
  static const int kHashFieldNumber = 1;
  inline const ::std::string& hash() const;
  inline void set_hash(const ::std::string& value);
  inline void set_hash(const char* value);
  inline void set_hash(const char* value, size_t size);
  inline ::std::string* mutable_hash();
  
  // required uint32 size_x = 2;
  inline bool has_size_x() const;
  inline void clear_size_x();
  static const int kSizeXFieldNumber = 2;
  inline ::google::protobuf::uint32 size_x() const;
  inline void set_size_x(::google::protobuf::uint32 value);
  
  // required uint32 size_y = 3;
  inline bool has_size_y() const;
  inline void clear_size_y();
  static const int kSizeYFieldNumber = 3;
  inline ::google::protobuf::uint32 size_y() const;
  inline void set_size_y(::google::protobuf::uint32 value);
  
  // required uint32 size_z = 4;
  inline bool has_size_z() const;
  inline void clear_size_z();
  static const int kSizeZFieldNumber = 4;
  inline ::google::protobuf::uint32 size_z() const;
  inline void set_size_z(::google::protobuf::uint32 value);
  
  // required bytes data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  
  // @@protoc_insertion_point(class_scope:sculpt.ServerPiece)
 private:
  mutable int _cached_size_;
  
  ::std::string* hash_;
  static const ::std::string _default_hash_;
  ::google::protobuf::uint32 size_x_;
  ::google::protobuf::uint32 size_y_;
  ::google::protobuf::uint32 size_z_;
  ::std::string* data_;
  static const ::std::string _default_data_;
  friend void  protobuf_AddDesc_messages_2etxt();
  friend void protobuf_AssignDesc_messages_2etxt();
  friend void protobuf_ShutdownFile_messages_2etxt();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ServerPiece* default_instance_;
};
// ===================================================================


// ===================================================================

// Server

// required uint32 map_id = 1;
inline bool Server::has_map_id() const {
  return _has_bit(0);
}
inline void Server::clear_map_id() {
  map_id_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 Server::map_id() const {
  return map_id_;
}
inline void Server::set_map_id(::google::protobuf::uint32 value) {
  _set_bit(0);
  map_id_ = value;
}

// required string map_name = 2;
inline bool Server::has_map_name() const {
  return _has_bit(1);
}
inline void Server::clear_map_name() {
  if (map_name_ != &_default_map_name_) {
    map_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Server::map_name() const {
  return *map_name_;
}
inline void Server::set_map_name(const ::std::string& value) {
  _set_bit(1);
  if (map_name_ == &_default_map_name_) {
    map_name_ = new ::std::string;
  }
  map_name_->assign(value);
}
inline void Server::set_map_name(const char* value) {
  _set_bit(1);
  if (map_name_ == &_default_map_name_) {
    map_name_ = new ::std::string;
  }
  map_name_->assign(value);
}
inline void Server::set_map_name(const char* value, size_t size) {
  _set_bit(1);
  if (map_name_ == &_default_map_name_) {
    map_name_ = new ::std::string;
  }
  map_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Server::mutable_map_name() {
  _set_bit(1);
  if (map_name_ == &_default_map_name_) {
    map_name_ = new ::std::string;
  }
  return map_name_;
}

// required uint32 total_pieces = 3;
inline bool Server::has_total_pieces() const {
  return _has_bit(2);
}
inline void Server::clear_total_pieces() {
  total_pieces_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 Server::total_pieces() const {
  return total_pieces_;
}
inline void Server::set_total_pieces(::google::protobuf::uint32 value) {
  _set_bit(2);
  total_pieces_ = value;
}

// required uint32 pieces_left = 4;
inline bool Server::has_pieces_left() const {
  return _has_bit(3);
}
inline void Server::clear_pieces_left() {
  pieces_left_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 Server::pieces_left() const {
  return pieces_left_;
}
inline void Server::set_pieces_left(::google::protobuf::uint32 value) {
  _set_bit(3);
  pieces_left_ = value;
}

// required uint32 pieces_available = 5;
inline bool Server::has_pieces_available() const {
  return _has_bit(4);
}
inline void Server::clear_pieces_available() {
  pieces_available_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 Server::pieces_available() const {
  return pieces_available_;
}
inline void Server::set_pieces_available(::google::protobuf::uint32 value) {
  _set_bit(4);
  pieces_available_ = value;
}

// -------------------------------------------------------------------

// ServerList

// repeated .sculpt.Server servers = 1;
inline int ServerList::servers_size() const {
  return servers_.size();
}
inline void ServerList::clear_servers() {
  servers_.Clear();
}
inline const ::sculpt::Server& ServerList::servers(int index) const {
  return servers_.Get(index);
}
inline ::sculpt::Server* ServerList::mutable_servers(int index) {
  return servers_.Mutable(index);
}
inline ::sculpt::Server* ServerList::add_servers() {
  return servers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sculpt::Server >&
ServerList::servers() const {
  return servers_;
}
inline ::google::protobuf::RepeatedPtrField< ::sculpt::Server >*
ServerList::mutable_servers() {
  return &servers_;
}

// -------------------------------------------------------------------

// ServerPiece

// required string hash = 1;
inline bool ServerPiece::has_hash() const {
  return _has_bit(0);
}
inline void ServerPiece::clear_hash() {
  if (hash_ != &_default_hash_) {
    hash_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ServerPiece::hash() const {
  return *hash_;
}
inline void ServerPiece::set_hash(const ::std::string& value) {
  _set_bit(0);
  if (hash_ == &_default_hash_) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
}
inline void ServerPiece::set_hash(const char* value) {
  _set_bit(0);
  if (hash_ == &_default_hash_) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
}
inline void ServerPiece::set_hash(const char* value, size_t size) {
  _set_bit(0);
  if (hash_ == &_default_hash_) {
    hash_ = new ::std::string;
  }
  hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerPiece::mutable_hash() {
  _set_bit(0);
  if (hash_ == &_default_hash_) {
    hash_ = new ::std::string;
  }
  return hash_;
}

// required uint32 size_x = 2;
inline bool ServerPiece::has_size_x() const {
  return _has_bit(1);
}
inline void ServerPiece::clear_size_x() {
  size_x_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 ServerPiece::size_x() const {
  return size_x_;
}
inline void ServerPiece::set_size_x(::google::protobuf::uint32 value) {
  _set_bit(1);
  size_x_ = value;
}

// required uint32 size_y = 3;
inline bool ServerPiece::has_size_y() const {
  return _has_bit(2);
}
inline void ServerPiece::clear_size_y() {
  size_y_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 ServerPiece::size_y() const {
  return size_y_;
}
inline void ServerPiece::set_size_y(::google::protobuf::uint32 value) {
  _set_bit(2);
  size_y_ = value;
}

// required uint32 size_z = 4;
inline bool ServerPiece::has_size_z() const {
  return _has_bit(3);
}
inline void ServerPiece::clear_size_z() {
  size_z_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 ServerPiece::size_z() const {
  return size_z_;
}
inline void ServerPiece::set_size_z(::google::protobuf::uint32 value) {
  _set_bit(3);
  size_z_ = value;
}

// required bytes data = 5;
inline bool ServerPiece::has_data() const {
  return _has_bit(4);
}
inline void ServerPiece::clear_data() {
  if (data_ != &_default_data_) {
    data_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& ServerPiece::data() const {
  return *data_;
}
inline void ServerPiece::set_data(const ::std::string& value) {
  _set_bit(4);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ServerPiece::set_data(const char* value) {
  _set_bit(4);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ServerPiece::set_data(const void* value, size_t size) {
  _set_bit(4);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerPiece::mutable_data() {
  _set_bit(4);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  return data_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sculpt

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2etxt__INCLUDED
